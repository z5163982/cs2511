package unsw.dungeon;

import java.util.ArrayList;

/**
 * The player entity
 * @author Robert Clifton-Everest
 *
 */
public class Player extends Entity implements PlayerSubject {

    private Dungeon dungeon;
    private Inventory inventory;
	public VincibilityState state;
	public int InvincibilityTime = 10;
	public ArrayList<Enemy> enemies;

    /**
     * Create a player positioned in square (x,y)
     * @param x
     * @param y
     */
    public Player(Dungeon dungeon, int x, int y) {
        super(x, y);
        this.dungeon = dungeon;
        this.inventory = new Inventory(new ArrayList<Item>());
		this.state = new VincibleState();
    }

    public VincibilityState getState() {
		return state;
	}
    
    public VincibilityState turnVincible() {
		return state.turnVincible();
	}
	
	public VincibilityState turnInvincible() {
		return state.turnInvincible();
	}

	
	public boolean canMove(int x, int y, String direction) {
    	Terrain terrain = dungeon.returnTerrain(x, y);
        if ((terrain == null) || terrain.canCross(x, y, direction, inventory)) {
        	return true;
        }
        return false;
    }
	
	// FOR NOW it will activate immediately on pickup, will change if/when and action button is implemented
	public void activatePotion() {
    	for (Item I : inventory.getInventory()) {
    		if (I instanceof Potion) {
    			state = turnInvincible();
    			InvincibilityTime = 10;
    			inventory.removeItem(I);
    			return;
    		}
    	}
    }
	
	public void invincibilityTimer() {
		if (state instanceof InvincibleState) {
			int time = InvincibilityTime--;
			if (time == 0) 
				state = turnVincible();
		}
	}
    
    public void pickUpItem(int x, int y) {
    	Item item = dungeon.returnItem(x, y);
    	if (!(item == null)) {
    		if ((item instanceof Sword) && !(hasSword())) {
    			inventory.addItem(item);
    			dungeon.removeEntity(item);
    			((Sword) item).equipSword();
    			System.out.println(inventory.getInventory());
    			return;
    		}
    		if (item instanceof Potion) {
    			inventory.addItem(item);
    			dungeon.removeEntity(item);
    			activatePotion();
    		}
    		else {
    			inventory.addItem(item);
    			dungeon.removeEntity(item);
    		}
    		System.out.println(inventory.getInventory());
    	}
    }
    
    public void moveUp() {
        if (!canMove(getX(), getY() - 1, "up")) {
        	return;
        }
        if (getY() > 0)
            y().set(getY() - 1);
    	
        enemies = dungeon.getEnemies();
        pickUpItem(getX(), getY());
    	invincibilityTimer();
    	notifyEnemies();
    	interactEnemy();
    }

    public void moveDown() {
    	if (!canMove(getX(), getY() + 1, "down")) {
        	return;
        }
        if (getY() < dungeon.getHeight() - 1)
            y().set(getY() + 1);
        
        enemies = dungeon.getEnemies();
        pickUpItem(getX(), getY());
    	invincibilityTimer();
    	notifyEnemies();
    	interactEnemy();
    }

    public void moveLeft() {
    	if (!canMove(getX() - 1, getY(), "left")) {
        	return;
        }
    	if (getX() > 0)
            x().set(getX() - 1);
    	
    	enemies = dungeon.getEnemies();
    	pickUpItem(getX(), getY());
    	invincibilityTimer();
    	notifyEnemies();
    	interactEnemy();
    }

    public void moveRight() {
    	if (!canMove(getX() + 1, getY(), "right")) {
        	return;
        }
        if (getX() < dungeon.getWidth() - 1)
            x().set(getX() + 1);
        
        enemies = dungeon.getEnemies();
        pickUpItem(getX(), getY());
    	invincibilityTimer();
    	notifyEnemies();
    	interactEnemy();
    }

	@Override
	public void addEnemy(Enemy E) {
		enemies.add(E);
		
	}

	@Override
	public void removeEnemy(Enemy E) {
		enemies.remove(E);
	}

	@Override
	public void notifyEnemies() {
		for (Enemy E: enemies)
			E.update(this);
			
	}
	

	private void interactEnemy() {
		int flag = 0;
		for (Enemy E: enemies) {
			if (E.getX() == this.getX() && E.getY() == this.getY()) {
				for (Item I : inventory.getInventory()) {
					if ((I instanceof Sword) && ((Sword) I).getState() instanceof swordIntact) {
						flag = 1;
						System.out.println("Enemy Died due to ur Sword");
						((Sword) I).reduceDurability();
						dungeon.removeEntity(E);
					}
					removeSword();
				}
				if (this.state instanceof InvincibleState) {
					flag = 1;
					System.out.println("Enemy Died due to ur Invincibility");
					dungeon.removeEntity(E);
				}
				if (flag == 0) {
					System.out.println("You Died");
				}
			}
		}
	}
	public boolean hasSword() {
		for (Item I : inventory.getInventory()) {
			if (I instanceof Sword) {
				return true;
			}
		}
		return false;
	}
	
	private void removeSword() {
		for (Item I : inventory.getInventory()) {
			if ((I instanceof Sword && ((Sword) I).durability == 0)) {
				inventory.removeItem(I);
				return;
			}
		}
	}

}


