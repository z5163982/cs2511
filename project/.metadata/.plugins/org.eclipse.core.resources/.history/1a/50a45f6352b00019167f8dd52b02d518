/**
 *
 */
package unsw.automata;

import javafx.beans.property.BooleanProperty;

/**
 * Conway's Game of Life on a 10x10 grid.
 *
 * @author Robert Clifton-Everest
 *
 */
public class GameOfLife {

	BooleanProperty[][] board = new BooleanProperty[10][10];
    public GameOfLife() {
    	for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                board[i][j].set(false);;
            }
        }	

    }

    public void ensureAlive(int x, int y) {
        this.board[x][y].setValue(true);
    }

    public void ensureDead(int x, int y) {
    	this.board[x][y].setValue(false);
    }

    public boolean isAlive(int x, int y) {
        
        return this.board[x][y].get();
    }

    public void tick() {
    	boolean[][] temp = new boolean[10][10];
		for (int i = 0; i < 10; i++) {
			for (int j = 0; j < 10; j++) {
				int nn = neighbours (i, j);
				temp[i][j] = decideCell (board[i][j], nn);
			}		
		}
		for (int i = 0; i < 10; i++) {
			for (int j = 0; j < 10; j++) {
				board[i][j].setValue(temp[i][j]);
			}
		}
    }


	boolean decideCell (BooleanProperty board2, int nn)
	{
		boolean ret;
		if (board2.get() == true) {
			if (nn < 2)
				ret = false;
			else if (nn == 2 || nn == 3)
				ret = true;
			else
				ret = false;
		} else if (nn == 3) {
			ret = true;
		} else {
			ret = false;
		}
		return ret;
	}

	int neighbours (int i, int j)
	{
		int nn = 0;
		for (int x = -1; x <= 1; x++) {
			for (int y = -1; y <= 1; y++) {
				if (x == 0 && y == 0) continue;
				int a = (i + x) % 10;
				if (a < 0) a += 10;
				int b = (j + y) % 10;
				if (b < 0) b += 10;
				if (board[a][b].get() == true) nn++;
			}
		}
		return nn;
	}

}
