/**
 *
 */
package unsw.automata;

/**
 * Conway's Game of Life on a 10x10 grid.
 *
 * @author Robert Clifton-Everest
 *
 */
public class GameOfLife {

	boolean[][] board = new boolean[10][10];
	
    public GameOfLife() {
       
    	for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                board[i][j] = false;
            }
        }	

    }

    public void ensureAlive(int x, int y) {
        this.board[x][y] = true;
    }

    public void ensureDead(int x, int y) {
    	this.board[x][y] = false;
    }

    public boolean isAlive(int x, int y) {
        
        return this.board[x][y];
    }

    public void tick() {
    	boolean[][] temp = new boolean[10][10];
    	
    			for (int i = 0; i < 10; i++) {
    				for (int j = 0; j < 10; j++) {
    					int nn = neighbours (i, j);
    					temp[i][j] = decideCell (board[i][j], nn);
    				}
    			}
    			printf ("=== After iteration %d ===\n", n);
    			copyBackAndShow ();
    		}

    		return 0;
    	}

    	char decideCell (int old, int nn)
    	{
    		char ret;
    		if (old == 1) {
    			if (nn < 2)
    				ret = 0;
    			else if (nn == 2 || nn == 3)
    				ret = 1;
    			else
    				ret = 0;
    		} else if (nn == 3) {
    			ret = 1;
    		} else {
    			ret = 0;
    		}
    		return ret;
    	}

    	int neighbours (int i, int j)
    	{
    		int nn = 0;
    		for (int x = -1; x <= 1; x++) {
    			for (int y = -1; y <= 1; y++) {
    				if (i + x < 0 || i + x > 9) continue;
    				if (j + y < 0 || j + y > 9) continue;
    				if (x == 0 && y == 0) continue;
    				if (board[i + x][j + y] == true) nn++;
    			}
    		}
    		return nn;
    	}

    	void copyBackAndShow (void)
    	{
    		for (int i = 0; i < N; i++) {
    			for (int j = 0; j < N; j++) {
    				board[i][j] = newboard[i][j];
    				if (board[i][j] == 0)
    					putchar ('.');
    				else
    					putchar ('#');
    			}
    			putchar ('\n');
    		}
    	}
    }

}
